#!/usr/bin/env perl

use strict;
use Parallel::Runner;

my $usage = qq(
crun - Run commands in a chain and concurrently (V2014.12.27)

    Perl edition, by Wei Shen <shenwei356\@gmail.com> 
    http://github.com/shenwei356/crun

USAGE:
    
    crun OPTIONS...

OPTIONS:

    -c STRING    Add a concurrent command
    -s STRING    Add a sequential command
    -t INT       Maximum concurrency (threads number) [4]
    -stdin       Concurrently run commands from STDIN
    -h           Help message
    
NOTE:

    The order of options decides the work flow! The two cases below are different:
    
    crun -s ls -s date
    crun -s date -s ls

EXAMPLE:

    crun -t 4 -s job1 -c job2 -c job3 -c job4 -s job5 -s job6

    The work flow is: 

        1. job1 must be executed fist. 
        2. job2,3,4 are independent, so they could be executed parallelly.
        3. job5 must wait for job2,3,4 being done.
        4. job6 could not start before job5 done.
     
    See the workflow graph below, long arrow means long excution time.
        
                  |----> job2     |  
        job1 ---> |--> job3       | -------> job5 --> job6
                  |--------> job4 |
  
    You can also concurrently run commands from STDIN:

        cat jobs.list | crun -t 8 -s "echo start" -stdin -s "echo end" 

        for f in *.fa; do echo clustalo -i \"\$f\" -o \"\$f.clustalo\"; done | crun -t 8 -stdin

);

my $chain   = [];    # jobs
my $threads = 4;

die "no arguments given.\nType \"crun -h\" for help.\n" unless @ARGV > 0;

while (@ARGV) {
    my $flag = shift @ARGV;

    if ( $flag eq '-h' or $flag eq '--help' or $flag eq '-help' ) {
        die $usage;
    }
    elsif ( $flag !~ /^\-/ ) {
        die "invalid option: $flag\nType \"crun -h\" for help.\n";
    }

    my $value = shift @ARGV;
    if ( $flag ne '-stdin' and not defined $value ) {
        die "no value for option $flag\nType \"crun -h\" for help.\n";
    }

    if ( $flag eq '-t' ) {
        die "value of -t should be positive integer\n"
            unless $value =~ /^\d+$/;
        $threads = $value;
    }
    elsif ( $flag eq '-c' ) {
        if ( @$chain > 0 ) {
            if ( ref $$chain[-1] eq ref [] ) {
                push @{ $$chain[-1] }, $value;
            }
            else {
                push @$chain, [$value];
            }
        }
        else {
            push @$chain, [$value];
        }
    }
    elsif ( $flag eq '-s' ) {
        push @$chain, $value;
    }
    elsif ( $flag eq '-stdin' ) {
        unshift @ARGV, $value if defined $value;
        my @cmds = ();
        my $fh   = *STDIN;
        for (<$fh>) {
            s/\r?\n|^\s+|\s+$//g;
            next if $_ eq '';
            push @cmds, $_;
        }
        push @$chain, \@cmds;
    }
    else {
        die "invalid option: $flag\nType \"crun -h\" for help.\n";
    }
}

die "no commands added.\nType \"crun -h\" for help.\n" if @$chain == 0;

for my $cmds (@$chain) {
    if ( ref $cmds eq ref [] ) {    # concurrent commands
        my $runner = Parallel::Runner->new($threads);
        for my $cmd (@$cmds) {
            $runner->run(
                sub {
                    my $fail = run($cmd);
                    die "failed to run: $cmd\n" if $fail;
                }
            );
        }
        $runner->finish;
    }
    else {                          # sequential command
        my $fail = run($cmds);
        die "failed to run: $cmds\n" if $fail;
    }
}

sub run {
    my ($cmd) = @_;
    system($cmd);

    if ( $? == -1 ) {
        die "[ERROR] fail to run: $cmd. Command ("
            . ( split /\s+/, $cmd )[0]
            . ") not found\n";
    }
    elsif ( $? & 127 ) {
        printf "[ERROR] command died with signal %d, %s coredump\n",
            ( $? & 127 ), ( $? & 128 ) ? 'with' : 'without';
    }
    else {
        # 0, ok
    }
}
